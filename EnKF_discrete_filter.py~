import numpy as np
from EnKF_simple_update import update

def  EnKF_filter(model,prior,state_dim,ens_size,nanl,tanl,obs,Q):

    """This is the bootstrap particle filter function
    
    The fields to supply are the derivative function `model', the resampler 
    function, the initial cloud 'prior', the model dimension and cloud size,
    the particle weights at initialization `weights', the number of analyses 
    'nanl', the number of steps to propagate between observations 'tanl',
    the observations with which to the observations with which to 
    and the inverse of the observational error covaraince `Q', and threshold
    which gives the threshold for the 'number of effective particles' count to
    trigger the resampler.
    """
    
    # storage dictionary for the trajectories and weights
    p_series = {}
    A = 'A_'

    # loop through the analysis times starting at time zero
    for i in range(nanl):

        # store the prior weights and states
	prior_S = prior

        # recompute the weights
        analysis = update(prior,obs[i,:],R,state_dim,ens_size)        
	post_S = analysis

        # map the cloud to the next analysis time;
        traj = model(analysis,tanl,ens_size)
        
        #create storage for next iteration
        A_i = A + str(i)
        p_series[A_i] = {'prior':prior_S,'post':post_S,'traj':traj}                    
     
        #initialize the next forecast
        prior = traj[:,-1,:]
        
    # final analysis time weight update - no forward trajectory to store
    prior_S = prior
    analysis = update(prior,obs[i,:],R,state_dim,ens_size)        
    post_S = analysis        

    A_i = A + str(i+1)
    p_series[A_i] = {'prior':prior_S,'post':post_S}
                        
    return p_series
